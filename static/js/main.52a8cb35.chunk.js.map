{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["HeaderStyle","paddingTop","height","background","color","textAlign","Header","style","TodoItem","state","getStyle","props","todo","completed","padding","borderBottom","textDecoration","this","type","onChange","markComplete","bind","id","title","btnStyle","onClick","delTodo","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AutoTodo","e","setState","target","value","onSubmit","preventDefault","addTodo","display","name","placeholder","flex","width","borderStyle","borderWidth","classNmae","App","filter","newTodo","uuid","v4","className","class","AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52a8cb35.chunk.js","sourcesContent":["import React from 'react';\r\nfunction Header(){\r\n\r\nreturn(\r\n<header style={HeaderStyle}>\r\n\r\n\r\n<h1>TODO LIST</h1>\r\n\r\n\r\n</header>\r\n)\r\n}\r\nconst HeaderStyle={\r\n    paddingTop:'20px',\r\n    height:'100px',\r\n    background:'#333',\r\n    color:'#fff',\r\n    textAlign:'center',\r\n\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nclass TodoItem extends Component {\r\n    state = {  }\r\n    getStyle = () =>{\r\n        if(this.props.todo.completed)\r\n        {return{\r\n            background:'#f4f4f4',\r\n            padding:'10px',\r\n            borderBottom:'1px #ccc dotted',\r\n            textDecoration:'line-through'}}\r\n            else{\r\n                return {\r\n                    textDecoration:\"none\"\r\n                }\r\n                \r\n            }\r\n        \r\n        \r\n        \r\n                }\r\n    \r\nrender() { \r\n        \r\n        return (  \r\n<div style={this.getStyle()}>\r\n<h2><input type=\"checkbox\" onChange={this.props.markComplete.bind(this, this.props.todo.id)}/> {'                '}{ this.props.todo.title } </h2>\r\n<button style={btnStyle} onClick={this.props.delTodo.bind(this , this.props.todo.id)}>x</button>\r\n</div>\r\n\r\n        );\r\n    }\r\n}\r\nTodoItem.propTypes={\r\n    todos: PropTypes.array.isRequired\r\n  }\r\n  const btnStyle={\r\n      background:'#ff0000',\r\n      color:'#fff',\r\n      border:'none',\r\n      padding:'5px 8px',\r\n      borderRadius:'50%',\r\n      cursor:'pointer',\r\n      float:'right'\r\n\r\n  }\r\n\r\n   \r\n \r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from \"prop-types\";\r\nexport class Todos extends Component {\r\n  state = {  }\r\n\r\n  render() {\r\n    return this.props.todos.map( todo=>{\r\n      return(\r\n       <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\r\n    )});\r\n  }\r\n};\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired\r\n}\r\n \r\nexport default Todos;","import React, { Component } from 'react';\r\nimport { throwStatement } from '@babel/types';\r\nclass AutoTodo extends Component {\r\n    state = { title:\"\" }\r\n    onChange=(e)=>{\r\n        this.setState({title:e.target.value});\r\n    }\r\n    onSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title : \"\"})\r\n    }\r\n    render() { \r\n        return (\r\n            \r\n            <form onSubmit={this.onSubmit} style={{display:'flex',height:'70px'}}>\r\n\r\n            <input type=\"text\" name=\"title\" placeholder=\"add todo\" style={{flex:'10',width:'80%',padding:'5px',borderStyle:'solid',borderWidth:'4px'}} value={this.state.title} onChange={this.onChange}></input>\r\n            <input type=\"submit\" value=\"submit\" classNmae=\"btn\" style={{flex:'1'}}></input>\r\n            \r\n            \r\n            </form>  );\r\n    }\r\n}\r\n \r\nexport default AutoTodo;","import React, { Component } from 'react';\nimport \"./App.css\"\nimport Header from './components/layout/Header.js';\nimport Todos from \"./components/Todos\";\nimport AddTodo from \"./components/AddTodo\";\nimport uuid from 'uuid';\n\nclass App extends Component {\n  state = { \ntodos:[{\n  id:1,\n  title:\"take out the crash\",\n  completed:false,\n},\n{\n  id:2,\n  title:\"take out the crash\",\n  completed:false,\n},\n{\n  id:3,\n  title:\"take out the crash\",\n  completed:false,\n}]\n\n\n\n   }\n   // toggle completed todo\n markComplete=(id)=>{\n  this.setState({todos:this.state.todos.map(todo=>{\n    if(todo.id===id){\n      todo.completed=!todo.completed\n    }\n    return todo\n  })})\n\n }  \n delTodo=(id)=>{\n   this.setState({todos:[...this.state.todos.filter(todo=>todo.id!==id)]});\n }\n addTodo=(title)=>{\n   const newTodo={\n     id:uuid.v4(),\n     title,\n     completed:false,\n   }\n   this.setState({todos:[...this.state.todos,newTodo]})\n }\n  render() { \n    return ( \n<div className=\"App\">\n<div class=\"container\">\n<Header></Header><AddTodo addTodo={this.addTodo}/>\n<Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n\n</div>\n     \n      </div>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}